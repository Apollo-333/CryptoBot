import ccxt
import pandas as pd
import time
from datetime import datetime, timedelta
from ta.trend import EMAIndicator, MACD, ADXIndicator
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import OnBalanceVolumeIndicator, VolumeWeightedAveragePrice
import telebot
from threading import Thread, Lock
import os
from dotenv import load_dotenv
import logging
import numpy as np
from collections import deque
import random

# ========== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ö–°–ò –î–õ–Ø PYTHONANYWHERE ==========
import os
os.environ['HTTP_PROXY'] = 'http://proxy.server:3128'
os.environ['HTTPS_PROXY'] = 'http://proxy.server:3128'

# ========== –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–ö–ò ==========
import sqlite3
from datetime import datetime, timedelta

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def init_database():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  subscription_end DATE,
                  is_active BOOLEAN DEFAULT TRUE)''')
    conn.commit()
    conn.close()

def check_subscription(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT subscription_end FROM users WHERE user_id = ? AND is_active = TRUE", (user_id,))
    result = c.fetchone()
    conn.close()
    
    if result and datetime.now().date() <= datetime.strptime(result[0], '%Y-%m-%d').date():
        return True
    return False

def add_user(user_id, days=30):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    end_date = (datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d')
    c.execute("INSERT OR REPLACE INTO users (user_id, subscription_end, is_active) VALUES (?, ?, TRUE)", 
              (user_id, end_date))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!")
    exit(1)

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    print("‚ùå ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    exit(1)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
MAIN_ANALYSIS_TIMEFRAMES = ['1h', '4h']
SHORT_TERM_TIMEFRAMES = ['15m', '30m']
PUMP_DUMP_TIMEFRAMES = ['5m', '15m']

MIN_VOLUME_USDT = 500000
MAX_RISK_PER_TRADE = 0.02
MIN_RISK_REWARD = 1.5

# –£–õ–£–ß–®–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò PUMP/DUMP –î–ï–¢–ï–ö–¢–û–†–ê
PUMP_THRESHOLD = 3.0  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
DUMP_THRESHOLD = -2.5
VOLUME_SPIKE_RATIO = 2.0

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
price_history = {}
volume_history = {}
last_signals = {}
signal_lock = Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False)

try:
    print(f"\nüî∑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É {ADMIN_CHAT_ID}...")
    bot.send_message(ADMIN_CHAT_ID, "üü¢ –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù!\n‚Ä¢ –†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ pump/dump\n‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ß–∞—Ç –Ω–∞–π–¥–µ–Ω.")
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    ADMIN_CHAT_ID = None

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BYBIT ==========
exchange = ccxt.bybit({
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'},
    'timeout': 30000
})

try:
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API...")
    markets = exchange.load_markets()
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    markets = {}

# ========== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_all_perp_symbols():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
    print("\nüîç –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
    
    all_symbols = []
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    popular_pairs = [
        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
        'ADA/USDT', 'AVAX/USDT', 'DOGE/USDT', 'DOT/USDT', 'LINK/USDT',
        'MATIC/USDT', 'LTC/USDT', 'ATOM/USDT', 'UNI/USDT', 'XLM/USDT',
        'ETC/USDT', 'BCH/USDT', 'FIL/USDT', 'ALGO/USDT', 'EOS/USDT',
        'AAVE/USDT', 'SUSHI/USDT', 'MKR/USDT', 'COMP/USDT', 'YFI/USDT',
        'THETA/USDT', 'VET/USDT', 'TRX/USDT', 'XTZ/USDT', 'NEAR/USDT',
        'FTM/USDT', 'MANA/USDT', 'SAND/USDT', 'GALA/USDT', 'ENJ/USDT',
        'CHZ/USDT', 'HBAR/USDT', 'EGLD/USDT', 'ZIL/USDT', 'IOTA/USDT',
        'CELO/USDT', 'ONE/USDT', 'HOT/USDT', 'ONT/USDT', 'ICX/USDT',
        'WAVES/USDT', 'RVN/USDT', 'SC/USDT', 'DASH/USDT', 'ZEC/USDT',
        'BAT/USDT', 'ZRX/USDT', 'SNX/USDT', 'CRV/USDT', 'REN/USDT',
        'OMG/USDT', 'KNC/USDT', 'BAND/USDT', 'NMR/USDT', 'OCEAN/USDT'
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
    for symbol in popular_pairs:
        try:
            ticker = exchange.fetch_ticker(symbol)
            volume = ticker.get('quoteVolume', 0)
            
            if volume > MIN_VOLUME_USDT:
                all_symbols.append({
                    'symbol': symbol,
                    'volume': volume,
                    'price': ticker['last']
                })
        except Exception as e:
            continue
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    all_market_symbols = list(markets.keys())
    random.shuffle(all_market_symbols)
    
    for symbol in all_market_symbols[:80]:
        try:
            market = markets[symbol]
            if (market.get('active', False) and 
                market.get('type', '') == 'swap' and
                symbol.endswith('/USDT:USDT') and
                not any(x in symbol.upper() for x in ['BULL', 'BEAR', '3L', '3S', 'UP', 'DOWN', '1000', '10000'])):
                
                ticker = exchange.fetch_ticker(symbol)
                volume = ticker.get('quoteVolume', 0)
                
                if volume > MIN_VOLUME_USDT:
                    clean_symbol = symbol.replace(':USDT', '')
                    if not any(item['symbol'] == clean_symbol for item in all_symbols):
                        all_symbols.append({
                            'symbol': clean_symbol,
                            'volume': volume,
                            'price': ticker['last']
                        })
                
                if len(all_symbols) >= 100:
                    break
                    
        except Exception as e:
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
    all_symbols.sort(key=lambda x: x['volume'], reverse=True)
    
    print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {len(all_symbols)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10
    print("\nüèÜ –¢–æ–ø-10 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É:")
    for i, item in enumerate(all_symbols[:10], 1):
        print(f"{i:2d}. {item['symbol']}: {item['volume']:,.0f} USDT")
    
    return [item['symbol'] for item in all_symbols]

def calculate_advanced_indicators(df):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ
        df['ema_20'] = EMAIndicator(df['close'], 20).ema_indicator()
        df['ema_50'] = EMAIndicator(df['close'], 50).ema_indicator()
        df['ema_100'] = EMAIndicator(df['close'], 100).ema_indicator()
        
        # MACD
        macd = MACD(df['close'], window_slow=26, window_fast=12, window_sign=9)
        df['macd'] = macd.macd()
        df['macd_signal'] = macd.macd_signal()
        df['macd_hist'] = macd.macd_diff()
        
        # RSI
        df['rsi_14'] = RSIIndicator(df['close'], 14).rsi()
        df['rsi_28'] = RSIIndicator(df['close'], 28).rsi()
        
        # Stochastic
        stoch = StochasticOscillator(df['high'], df['low'], df['close'], 14)
        df['stoch_k'] = stoch.stoch()
        df['stoch_d'] = df['stoch_k'].rolling(3).mean()
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        bb = BollingerBands(df['close'], window=20, window_dev=2)
        df['bb_upper'] = bb.bollinger_hband()
        df['bb_lower'] = bb.bollinger_lband()
        df['bb_middle'] = bb.bollinger_mavg()
        
        df['atr'] = AverageTrueRange(df['high'], df['low'], df['close'], 14).average_true_range()
        
        # Volume analysis
        df['obv'] = OnBalanceVolumeIndicator(df['close'], df['volume']).on_balance_volume()
        df['vwap'] = VolumeWeightedAveragePrice(df['high'], df['low'], df['close'], df['volume']).volume_weighted_average_price()
        df['volume_sma'] = df['volume'].rolling(20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        # ADX
        df['adx'] = ADXIndicator(df['high'], df['low'], df['close'], 14).adx()
        
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ calculate_advanced_indicators: {e}")
        return df

def calculate_signal_score(df, signal_type):
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        last = df.iloc[-1]
        
        score = 0
        max_score = 0
        
        # 1. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–º–∞–∫—Å 25 –±–∞–ª–ª–æ–≤)
        if signal_type == 'BUY':
            if last['ema_20'] > last['ema_50']: score += 8
            if last['ema_50'] > last['ema_100']: score += 7
            if last['close'] > last['ema_20']: score += 5
            if last['adx'] > 20: score += 5
        else:  # SELL
            if last['ema_20'] < last['ema_50']: score += 8
            if last['ema_50'] < last['ema_100']: score += 7
            if last['close'] < last['ema_20']: score += 5
            if last['adx'] > 20: score += 5
        max_score += 25
        
        # 2. –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–º–∞–∫—Å 30 –±–∞–ª–ª–æ–≤)
        if signal_type == 'BUY':
            if last['rsi_14'] < 40: score += 10
            elif last['rsi_14'] < 45: score += 7
            if last['rsi_28'] < 45: score += 5
            if last['stoch_k'] < 30 and last['stoch_k'] > last['stoch_d']: score += 8
            elif last['stoch_k'] < 35 and last['stoch_k'] > last['stoch_d']: score += 5
        else:  # SELL
            if last['rsi_14'] > 60: score += 10
            elif last['rsi_14'] > 55: score += 7
            if last['rsi_28'] > 55: score += 5
            if last['stoch_k'] > 70 and last['stoch_k'] < last['stoch_d']: score += 8
            elif last['stoch_k'] > 65 and last['stoch_k'] < last['stoch_d']: score += 5
        max_score += 30
        
        # 3. MACD (–º–∞–∫—Å 15 –±–∞–ª–ª–æ–≤)
        if signal_type == 'BUY':
            if last['macd'] > last['macd_signal']: score += 8
            if last['macd_hist'] > 0: score += 7
        else:  # SELL
            if last['macd'] < last['macd_signal']: score += 8
            if last['macd_hist'] < 0: score += 7
        max_score += 15
        
        # 4. –û–±—ä–µ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–º–∞–∫—Å 20 –±–∞–ª–ª–æ–≤)
        if last['obv'] > df['obv'].rolling(20).mean().iloc[-1]: 
            score += 6 if signal_type == 'BUY' else 3
        else:
            score += 3 if signal_type == 'SELL' else 0
            
        if last['close'] > last['vwap']: 
            score += 6 if signal_type == 'BUY' else 3
        else:
            score += 3 if signal_type == 'SELL' else 0
            
        if last['atr'] / last['close'] > 0.008: score += 4
        if last['volume_ratio'] > 1.2: score += 4
        max_score += 20
        
        # 5. –£—Ä–æ–≤–Ω–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–º–∞–∫—Å 10 –±–∞–ª–ª–æ–≤)
        bb_pos = (last['close'] - last['bb_lower']) / (last['bb_upper'] - last['bb_lower'])
        if signal_type == 'BUY':
            if bb_pos < 0.3: score += 10
            elif bb_pos < 0.4: score += 7
            elif bb_pos < 0.5: score += 4
        else:  # SELL
            if bb_pos > 0.7: score += 10
            elif bb_pos > 0.6: score += 7
            elif bb_pos > 0.5: score += 4
        max_score += 10
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        final_score = min(100, int((score / max_score) * 100)) if max_score > 0 else 0
        
        return final_score, score, max_score
    except Exception as e:
        return 0, 0, 0

def get_signal_strength(score):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–æ–≤"""
    if score >= 70:
        return 'VERY_STRONG', 'üî•üî•üî•'
    elif score >= 60:
        return 'STRONG', 'üî•üî•'
    elif score >= 50:
        return 'MEDIUM', 'üî•'
    elif score >= 40:
        return 'MODERATE', '‚ö°'
    else:
        return 'WEAK', '‚ö†Ô∏è'

def generate_main_signal(df, symbol, timeframe):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        last = df.iloc[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è BUY –∏ SELL –æ—Ç–¥–µ–ª—å–Ω–æ
        buy_score, buy_raw, buy_max = calculate_signal_score(df, 'BUY')
        sell_score, sell_raw, sell_max = calculate_signal_score(df, 'SELL')
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
        best_score = max(buy_score, sell_score)
        signal_type = 'BUY' if buy_score > sell_score else 'SELL'
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É
        if best_score < 45:  # –°–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
        if signal_type == 'BUY':
            entry = last['close']
            stop_loss = min(last['bb_lower'] * 0.98, entry * 0.97)
            take_profit_levels = [
                entry + (entry - stop_loss) * 1.5,
                entry + (entry - stop_loss) * 2.5,
                entry + (entry - stop_loss) * 3.5
            ]
        else:  # SELL
            entry = last['close']
            stop_loss = max(last['bb_upper'] * 1.02, entry * 1.03)
            take_profit_levels = [
                entry - (stop_loss - entry) * 1.5,
                entry - (stop_loss - entry) * 2.5,
                entry - (stop_loss - entry) * 3.5
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ R/R
        if signal_type == 'BUY':
            risk_reward = (take_profit_levels[0] - entry) / (entry - stop_loss)
        else:
            risk_reward = (entry - take_profit_levels[0]) / (stop_loss - entry)
        
        if risk_reward < MIN_RISK_REWARD:
            return None
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        tp_percentages = [calculate_percentage_change(entry, tp) for tp in take_profit_levels]
        sl_percentage = calculate_percentage_change(entry, stop_loss)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        strength, emoji = get_signal_strength(best_score)
        
        return {
            'type': signal_type,
            'symbol': symbol,
            'timeframe': timeframe,
            'entry': round(entry, 6),
            'take_profit': [round(tp, 6) for tp in take_profit_levels],
            'stop_loss': round(stop_loss, 6),
            'risk_reward': round(risk_reward, 2),
            'position_size': calculate_position_size(entry, stop_loss),
            'score': best_score,
            'strength': strength,
            'strength_emoji': emoji,
            'percentage_changes': {
                'tp1_percent': round(tp_percentages[0], 2),
                'tp2_percent': round(tp_percentages[1], 2),
                'tp3_percent': round(tp_percentages[2], 2),
                'sl_percent': round(sl_percentage, 2)
            },
            'indicators': {
                'rsi_14': round(last['rsi_14'], 1),
                'rsi_28': round(last['rsi_28'], 1),
                'stoch_k': round(last['stoch_k'], 1),
                'macd_hist': round(last['macd_hist'], 4),
                'adx': round(last['adx'], 1),
                'volume_ratio': round(last['volume_ratio'], 1)
            }
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_main_signal –¥–ª—è {symbol}: {e}")
        return None

def format_main_signal(signal):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    emoji = "üü¢" if signal['type'] == 'BUY' else "üî¥"
    
    tp_lines = []
    for i, (tp, percent) in enumerate(zip(signal['take_profit'], 
                                        [signal['percentage_changes']['tp1_percent'],
                                         signal['percentage_changes']['tp2_percent'],
                                         signal['percentage_changes']['tp3_percent']])):
        tp_lines.append(f"‚úÖ TP{i+1}: {tp} ({percent}%)")
    
    tp_text = "\n".join(tp_lines)
    
    return f"""
{emoji} {signal['type']} {signal['strength_emoji']} {signal['symbol']} ({signal['timeframe']})
{signal['strength_emoji']} –°–∏–ª–∞: {signal['strength']} | –û—Ü–µ–Ω–∫–∞: {signal['score']}% | R/R: {signal['risk_reward']}:1

üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal['position_size']} coins
üìç –í—Ö–æ–¥: {signal['entry']}
‚ùå SL: {signal['stop_loss']} ({signal['percentage_changes']['sl_percent']}%)

{tp_text}

üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
RSI 14/28: {signal['indicators']['rsi_14']}/{signal['indicators']['rsi_28']}
Stoch K: {signal['indicators']['stoch_k']} | ADX: {signal['indicators']['adx']}
MACD Hist: {signal['indicators']['macd_hist']} | Volume: {signal['indicators']['volume_ratio']}x

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢' if signal['strength'] in ['VERY_STRONG', 'STRONG'] else '–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢'}
"""

def calculate_percentage_change(entry, target):
    return ((target - entry) / entry) * 100

def calculate_position_size(entry, stop_loss, account_balance=1000):
    risk_amount = account_balance * MAX_RISK_PER_TRADE
    risk_per_coin = abs(entry - stop_loss)
    
    if risk_per_coin == 0:
        return 0
    
    position_size = risk_amount / risk_per_coin
    return round(position_size, 6)

# ========== –£–õ–£–ß–®–ï–ù–ù–´–ô PUMP/DUMP –î–ï–¢–ï–ö–¢–û–† ==========
def analyze_trend_for_pump_dump(symbol, timeframe='5m'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=50)
        if len(ohlcv) < 20:
            return "NEUTRAL"
            
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–Ω–¥–∞
        df['ema_20'] = EMAIndicator(df['close'], 20).ema_indicator()
        df['ema_50'] = EMAIndicator(df['close'], 50).ema_indicator()
        df['rsi'] = RSIIndicator(df['close'], 14).rsi()
        
        last = df.iloc[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if last['ema_20'] > last['ema_50'] and last['rsi'] < 70:
            return "UPTREND"
        elif last['ema_20'] < last['ema_50'] and last['rsi'] > 30:
            return "DOWNTREND"
        else:
            return "NEUTRAL"
            
    except Exception as e:
        return "NEUTRAL"

def detect_pump_dump_with_recommendation(symbol, timeframe='5m'):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º"""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=20)
        if len(ohlcv) < 10:
            return None
            
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        current_price = df['close'].iloc[-1]
        prev_price_1 = df['close'].iloc[-2]
        prev_price_3 = df['close'].iloc[-4] if len(df) >= 4 else prev_price_1
        
        price_change_1 = ((current_price - prev_price_1) / prev_price_1) * 100
        price_change_3 = ((current_price - prev_price_3) / prev_price_3) * 100
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].rolling(10).mean().iloc[-1]
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = analyze_trend_for_pump_dump(symbol, timeframe)
        
        # –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í –° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò
        recommendation = None
        signal_type = None
        
        if price_change_1 > PUMP_THRESHOLD and volume_ratio > VOLUME_SPIKE_RATIO:
            if trend == "UPTREND":
                signal_type = "PUMP_TREND_CONTINUATION"
                recommendation = "LONG"
            elif trend == "DOWNTREND":
                signal_type = "PUMP_TREND_REVERSAL" 
                recommendation = "LONG_CAREFUL"
            else:
                signal_type = "PUMP_NEUTRAL"
                recommendation = "LONG_NEUTRAL"
                
        elif price_change_1 < DUMP_THRESHOLD and volume_ratio > VOLUME_SPIKE_RATIO:
            if trend == "DOWNTREND":
                signal_type = "DUMP_TREND_CONTINUATION"
                recommendation = "SHORT"
            elif trend == "UPTREND":
                signal_type = "DUMP_TREND_REVERSAL"
                recommendation = "SHORT_CAREFUL"
            else:
                signal_type = "DUMP_NEUTRAL"
                recommendation = "SHORT_NEUTRAL"
        
        if signal_type and recommendation:
            return {
                'type': signal_type,
                'recommendation': recommendation,
                'symbol': symbol,
                'price_change_1min': round(price_change_1, 2),
                'price_change_3min': round(price_change_3, 2),
                'volume_ratio': round(volume_ratio, 2),
                'current_price': current_price,
                'trend': trend,
                'timeframe': timeframe,
                'timestamp': datetime.now().strftime('%H:%M:%S')
            }
            
    except Exception as e:
        return None
    
    return None

def get_recommendation_details(recommendation, symbol, current_price):
    """–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–¥–µ–ª–æ–∫"""
    details = {
        'LONG': {
            'action': 'üü¢ –ü–û–ö–£–ü–ê–¢–¨ (LONG)',
            'reason': 'Pump –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
            'entry': f'{current_price * 0.995:.4f}',  # -0.5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            'sl': f'{current_price * 0.97:.4f}',     # -3%
            'tp1': f'{current_price * 1.02:.4f}',    # +2%
            'tp2': f'{current_price * 1.04:.4f}'     # +4%
        },
        'LONG_CAREFUL': {
            'action': 'üü° –ü–û–ö–£–ü–ê–¢–¨ –û–°–¢–û–†–û–ñ–ù–û',
            'reason': 'Pump –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç',
            'entry': f'{current_price * 0.99:.4f}',   # -1%
            'sl': f'{current_price * 0.96:.4f}',      # -4%
            'tp1': f'{current_price * 1.015:.4f}',    # +1.5%
            'tp2': f'{current_price * 1.03:.4f}'      # +3%
        },
        'SHORT': {
            'action': 'üî¥ –ü–†–û–î–ê–í–ê–¢–¨ (SHORT)',
            'reason': 'Dump –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
            'entry': f'{current_price * 1.005:.4f}',  # +0.5%
            'sl': f'{current_price * 1.03:.4f}',      # +3%
            'tp1': f'{current_price * 0.98:.4f}',     # -2%
            'tp2': f'{current_price * 0.96:.4f}'      # -4%
        },
        'SHORT_CAREFUL': {
            'action': 'üü° –ü–†–û–î–ê–í–ê–¢–¨ –û–°–¢–û–†–û–ñ–ù–û',
            'reason': 'Dump –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç',
            'entry': f'{current_price * 1.01:.4f}',   # +1%
            'sl': f'{current_price * 1.04:.4f}',      # +4%
            'tp1': f'{current_price * 0.985:.4f}',    # -1.5%
            'tp2': f'{current_price * 0.97:.4f}'      # -3%
        }
    }
    
    return details.get(recommendation, {
        'action': '‚ö™ –ù–ï–¢ –ß–ï–¢–ö–û–ì–û –°–ò–ì–ù–ê–õ–ê',
        'reason': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
        'entry': 'N/A',
        'sl': 'N/A',
        'tp1': 'N/A',
        'tp2': 'N/A'
    })

def monitor_pump_dump():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —á–µ—Ç–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    print(f"\nüîç –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û pump/dump –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")
    
    symbols = get_all_perp_symbols()[:60]
    
    detected_events = []
    for symbol in symbols:
        try:
            for timeframe in PUMP_DUMP_TIMEFRAMES:
                if event := detect_pump_dump_with_recommendation(symbol, timeframe):
                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    event_key = f"{symbol}_{event['type']}"
                    with signal_lock:
                        if event_key not in last_signals or time.time() - last_signals[event_key] > 600:  # 10 –º–∏–Ω—É—Ç
                            
                            detected_events.append(event)
                            last_signals[event_key] = time.time()
                            
                            print(f"üö® {event['type']} {event['symbol']}: {event['price_change_1min']}%")
                            
                            if ADMIN_CHAT_ID:
                                try:
                                    details = get_recommendation_details(
                                        event['recommendation'], 
                                        event['symbol'], 
                                        event['current_price']
                                    )
                                    
                                    message = f"""
üéØ {details['action']}

üìä –ü–∞—Ä–∞: {event['symbol']}
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {event['price_change_1min']}% (3—Å–≤–µ—á–∏: {event['price_change_3min']}%)
üìä –û–±—ä–µ–º: {event['volume_ratio']}x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
üìâ –¢—Ä–µ–Ω–¥: {event['trend']}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {event['current_price']}

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
{details['reason']}

üìç –í—Ö–æ–¥: {details['entry']}
‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å: {details['sl']}
‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1: {details['tp1']}
‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2: {details['tp2']}

‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {event['timeframe']}
üïí –í—Ä–µ–º—è: {event['timestamp']}

üí° –°–∏–≥–Ω–∞–ª: {event['type']}
"""
                                    bot.send_message(ADMIN_CHAT_ID, message)
                                    time.sleep(0.3)
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        except Exception as e:
            continue
        
        time.sleep(0.05)
    
    if detected_events:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(detected_events)} pump/dump —Å–æ–±—ã—Ç–∏–π")
    else:
        print("‚ÑπÔ∏è Pump/dump —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# ========== –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó ==========
def run_main_analysis():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"\nüîç –ù–∞—á–∞–ª–æ –û–°–ù–û–í–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –≤ {datetime.now().strftime('%H:%M:%S')}")
    
    signals = []
    symbols = get_all_perp_symbols()
    
    if not symbols:
        print("‚ùå –ù–µ—Ç –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    analyzed_count = 0
    signal_count = 0
    
    for symbol in symbols:
        try:
            for timeframe in MAIN_ANALYSIS_TIMEFRAMES:
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=100)
                if len(ohlcv) < 50:
                    continue
                    
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df = calculate_advanced_indicators(df)
                
                if signal := generate_main_signal(df, symbol, timeframe):
                    signals.append(signal)
                    signal_count += 1
                    print(f"üéØ {signal['strength_emoji']} {signal['type']} {signal['symbol']} - –û—Ü–µ–Ω–∫–∞: {signal['score']}%")
                
                analyzed_count += 1
                if analyzed_count % 20 == 0:
                    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} –ø–∞—Ä... –ù–∞–π–¥–µ–Ω–æ {signal_count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        except Exception as e:
            continue
    
    # –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø - –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    signals.sort(key=lambda x: x['score'], reverse=True)
    
    if signals:
        print(f"\n‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã —Å –æ—Ü–µ–Ω–∫–æ–π –≤—ã—à–µ 45%
        good_signals = [s for s in signals if s['score'] >= 45]
        
        print(f"üìà –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ({len(good_signals)}):")
        for i, signal in enumerate(good_signals[:10], 1):  # –î–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
            print(f"{i}. {signal['type']} {signal['symbol']} - {signal['score']}% - R/R: {signal['risk_reward']}:1")
            if ADMIN_CHAT_ID:
                try:
                    bot.send_message(ADMIN_CHAT_ID, format_main_signal(signal))
                    time.sleep(0.5)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    
    else:
        print("\n‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑: —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def run_short_term_analysis():
    """–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ 15m/30m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
    print("üìä –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ 15m/30m...")
    
    symbols = get_all_perp_symbols()[:40]  # –ú–µ–Ω—å—à–µ –ø–∞—Ä –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    signals = []
    for symbol in symbols:
        try:
            for timeframe in SHORT_TERM_TIMEFRAMES:
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=50)
                if len(ohlcv) < 20:
                    continue
                    
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df = calculate_advanced_indicators(df)
                
                if signal := generate_main_signal(df, symbol, timeframe):
                    signals.append(signal)
                    print(f"‚ö° {signal['type']} {signal['symbol']} - {signal['score']}%")
        
        except Exception as e:
            continue
    
    if signals and ADMIN_CHAT_ID:
        summary = "üìä –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –°–ò–ì–ù–ê–õ–´ (15m/30m):\n"
        for signal in signals[:5]:  # –¢–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤
            summary += f"{signal['type']} {signal['symbol']} - {signal['score']}%\n"
        bot.send_message(ADMIN_CHAT_ID, summary)

# ========== –£–õ–£–ß–®–ï–ù–ù–´–ô –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê ==========
def run_analysis_cycle():
    """–ß–µ—Ç–∫–∏–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    analysis_count = 0
    
    while True:
        try:
            analysis_count += 1
            current_time = datetime.now()
            
            print(f"\n{'='*60}")
            print(f"üéØ –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê #{analysis_count} - {current_time.strftime('%H:%M:%S')}")
            print(f"{'='*60}")
            
            # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó - –∫–∞–∂–¥—ã–π —á–∞—Å
            if current_time.minute == 0:  # –í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
                print("üïê –ó–∞–ø—É—Å–∫ –û–°–ù–û–í–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)...")
                run_main_analysis()
            
            # –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            elif current_time.minute % 30 == 0:
                print("üïë –ó–∞–ø—É—Å–∫ –ö–†–ê–¢–ö–û–°–†–û–ß–ù–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)...")
                run_short_term_analysis()
            
            # PUMP/DUMP –ú–û–ù–ò–¢–û–†–ò–ù–ì - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
            print("üîç –ó–∞–ø—É—Å–∫ PUMP/DUMP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitor_pump_dump()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
            next_minute = (current_time + timedelta(minutes=1)).replace(second=0, microsecond=0)
            sleep_time = (next_minute - current_time).total_seconds()
            time.sleep(max(1, sleep_time))
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            time.sleep(60)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞ v2.0...")
    print("üéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è pump/dump")
    print("‚Ä¢ –†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π") 
    print("‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫...")
    run_main_analysis()
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    analysis_thread = Thread(target=run_analysis_cycle, daemon=True)
    analysis_thread.start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:

        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
       

